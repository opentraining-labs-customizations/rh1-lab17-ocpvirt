- name: Preparing the exercise6
  hosts: localhost
  gather_facts: true

  vars:
    user: "{{ lookup('env', 'USER') }}"
    vm_name: "exercise6"
    namespace: "namespace-{{ user }}"

  tasks:
    - name: Check if VM exists and get details
      kubernetes.core.k8s_info:
        kind: VirtualMachine
        api_version: kubevirt.io/v1
        name: "{{ vm_name }}"
        namespace: "{{ namespace }}"
      register: vm_info

    - name: If exists and running stop VirtualMachine 
      when: vm_info.resources | length > 0 and vm_info.resources[0].spec.running == true
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: kubevirt.io/v1
          kind: VirtualMachine
          metadata:
            name: "{{ vm_name }}"
            namespace: "{{ namespace }}"
          spec:
            running: false
      register: stop_vm

    # - name: Wait for VirtualMachine to stop
    #   when: stop_vm is defined
    #   ansible.builtin.wait_for:
    #     timeout: 60
    #   delay: 10

    - name: Wait for VirtualMachine to stop
      kubernetes.core.k8s_info:
        kind: VirtualMachineInstance
        namespace: "namespace-{{ user }}"
        name: "exercise6"
      register: exercise6vm
      retries: "60"
      delay: "10"
      until: exercise6vm.resources | length == 0

    - name: Breaking the exercise6
      kubernetes.core.k8s:
        state: present
        template: "exercise6-create-vm.yaml.j2"
      register: breakvm
      until: breakvm is succeeded
      retries: 60
      delay: 10
      failed_when: breakvm is failed or breakvm.failed

    - name: Wait for VM to be running
      kubernetes.core.k8s_info:
        api_version: kubevirt.io/v1
        kind: VirtualMachineInstance
        namespace: "namespace-{{ user }}"
        name: "exercise6"
      register: exercise6info
      until: "exercise6info.resources | length > 0 and exercise6info.resources[0].status.phase == 'Running'"
      retries: 60
      delay: 10
      failed_when: exercise6info.resources | length == 0

