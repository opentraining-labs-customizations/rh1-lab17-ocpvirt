- name: Fixing the exercise4
  hosts: localhost
  gather_facts: true

  vars:
    user: "{{ lookup('env', 'USER') }}"
    vm_name: "exercise6"
    namespace: "namespace-{{ user }}"
    rootdisk_to_check: "rootdisk"
    cloudinitdisk_to_check: "cloudinitdisk"

  tasks:

    # - name: Get the VirtualMachineInstanceMigration resource
    #   kubernetes.core.k8s_info:
    #     kind: VirtualMachineInstanceMigration
    #     api_version: kubevirt.io/v1
    #     namespace: "{{ namespace }}"
    #   register: vmi_migrations
    #   ignore_errors: true

    # - name: Get the VirtualMachineInstanceMigration for the Exercise6 VM
    #   ansible.builtin.set_fact:
    #     filtered_vmi_migrations: "{{ vmi_migrations.resources | selectattr('spec.vmiName', 'equalto', vm_name) | list }}"
    #   ignore_errors: true

    # - name: Order VirtualMachineInstanceMigration by startTimestamp (newst first)
    #   ansible.builtin.set_fact:
    #     sorted_vmi_migrations: "{{ filtered_vmi_migrations | sort(attribute='status.startTimestamp', reverse=true) }}"
    #   ignore_errors: true

    # - name: Get VirtualMachineInstanceMigration status
    #   ansible.builtin.set_fact:
    #     vmi_migration_status: "{{ filtered_vmi_migrations[0].status.phase }}"
    #     fail_msg: "Ops, something went wrong and you have to fix the exercise!"

    - name: Get the exercise6 VM details from OpenShift Virtualization
      kubernetes.core.k8s_info:
        kind: VirtualMachine
        api_version: kubevirt.io/v1
        name: exercise6
        namespace: "namespace-{{ user }}"
      register: vm_info

    - name: Get the rootdisk details
      ansible.builtin.set_fact:
        rootdisk: " {{
            vm_info.resources[0].spec.template.spec.domain.devices.disks
            | selectattr('name', 'equalto', rootdisk_to_check)
          }}"

    - name:  Get the cloudinitdisk details
      ansible.builtin.set_fact:
        cloudinitdisk: " {{
            vm_info.resources[0].spec.template.spec.domain.devices.disks
            | selectattr('name', 'equalto', cloudinitdisk_to_check)
          }}"

    - name: Certify that the final phase is Succeeded and rootdisk and cloudinitdisk have no readonly attribute
      ansible.builtin.assert:
        that:
          - "rootdisk.disk is not defined or 'readonly' not in rootdisk.disk"
          - "cloudinitdisk.disk is not defined or 'readonly' not in cloudinitdisk.disk"
          - vmi_migration_status == "Succeeded"
        success_msg: "Good job, the development team are happy that you solved the problem!"
        fail_msg: "Ops, something went wrong and you have to fix the exercise!"
